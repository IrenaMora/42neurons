//
// Created by Irena Mora on 1/12/22.
//

#pragma once

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief This class allows you to create an input neuron where your input numeric data will be stored.
/// The calculation of the neural network starts with these neurons.
////////////////////////////////////////////////////////////////////////////////////////////////////
class NeuronIn
{
public:
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \brief The constructor allows you to set the default status (value) of the neuron.
	/// \param status The default is set to 0. It is of type double.
	/// For example, the value of "red" for a pixel from rgb (from 0 to 255)
	////////////////////////////////////////////////////////////////////////////////////////////////////
	NeuronIn(double status = 0);
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \brief Get the status (value) of this neuron.
	/// This status was set by you before.
	/// The neural network cannot change it, because the neuron is the input.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	double	getStatus() const;
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \brief Set the status (value) for the given neuron.
	/// \param status The default is set to 0. It is of type double.
	/// For example 0.0 or 1.0 depending on whether the pixel is white or black.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void	setStatus(double status);
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \brief Show the number of connections in which the neuron participates.
	/// If the **addConnection** function from **NeuronNetwork** class was applied to this neuron 2 times, this function will return the number 2;
	/// if the function was not applied, returns 0.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	size_t	getCountConnections();
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief It is a type of neuron. You don't need to work with its status (value), unlike **NeuronIn**.
/// Create it, add it to your neural network and make the necessary connections with this class, and everything will work for you.
////////////////////////////////////////////////////////////////////////////////////////////////////
class NeuronDeep
{
public:
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \brief Constructor for this type of neuron.
	/// It does not take parameters, unlike the **NeuronIn** class.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	NeuronDeep();
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \brief The function returns the status (value) of this neuron.
	/// It defaults to 0 and you cannot set it yourself.
	/// The neural network, when executing the **compute** and **learn** functions from the **NeuronNetwork** class, does this for you.
	/// You can use this feature for educational purposes and when trying to design a neural network.
	/// After design, it is unnecessary.
	/// Works in the same way as the function of the same name in the **NeuronIn** class.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	double	getStatus() const;
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \brief Show the number of connections in which the neuron participates.
	/// If the **addConnection** function from **NeuronNetwork** class was applied to this neuron 2 times, this function will return the number 2;
	/// if the function was not applied, returns 0.
	/// Works in the same way as the function of the same name in the **NeuronIn** class.
	////////////////////////////////////////////////////////////////////////////////////////////////////
	size_t	getCountConnections();
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Something
////////////////////////////////////////////////////////////////////////////////////////////////////
class NeuronOut
{
public:
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \brief Something
	////////////////////////////////////////////////////////////////////////////////////////////////////
	NeuronOut(double expectedStatus = 0.0);
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \brief Something
	////////////////////////////////////////////////////////////////////////////////////////////////////
	double	getStatus() const;
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \brief Something
	////////////////////////////////////////////////////////////////////////////////////////////////////
	size_t	getCountConnections();
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \brief Something
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void	setExpectedStatus(double expectedStatus);
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \brief Something
	////////////////////////////////////////////////////////////////////////////////////////////////////
	double	getExpectedStatus() const;
};
